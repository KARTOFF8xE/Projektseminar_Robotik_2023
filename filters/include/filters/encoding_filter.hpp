#pragma once

#include "opencv2/opencv.hpp"
#include "sensor_msgs/image_encodings.hpp"

namespace filters {
    struct encoding_info_t {
        int type;
        cv::ColorConversionCodes conversion = cv::COLOR_COLORCVT_MAX;
    };

    namespace encoding_output_mappings {
        const std::string CV_TYPE_MAPPING[32] = {
            "CV_8UC1",
            "CV_8SC1",
            "CV_16UC1",
            "CV_16SC1",
            "CV_32SC1",
            "CV_32FC1",
            "CV_64FC1",
            "CV_16FC1",
            "CV_8UC2",
            "CV_8SC2",
            "CV_16UC2",
            "CV_16SC2",
            "CV_32SC2",
            "CV_32FC2",
            "CV_64FC2",
            "CV_16FC2",
            "CV_8UC3",
            "CV_8SC3",
            "CV_16UC3",
            "CV_16SC3",
            "CV_32SC3",
            "CV_32FC3",
            "CV_64FC3",
            "CV_16FC3",
            "CV_8UC4",
            "CV_8SC4",
            "CV_16UC4",
            "CV_16SC4",
            "CV_32SC4",
            "CV_32FC4",
            "CV_64FC4",
            "CV_16FC4",
        };
        const std::map<cv::ColorConversionCodes, std::string> CV_COLOR_CONVERSION_MAPPING = {
            {cv::COLOR_BGR2BGRA, "BGR2BGRA"},
            {cv::COLOR_BGRA2BGR, "BGRA2BGR"},
            {cv::COLOR_BGR2RGBA, "BGR2RGBA"},
            {cv::COLOR_RGBA2BGR, "RGBA2BGR"},
            {cv::COLOR_BGR2RGB, "BGR2RGB"},
            {cv::COLOR_BGRA2RGBA, "BGRA2RGBA"},
            {cv::COLOR_BGR2GRAY, "BGR2GRAY"},
            {cv::COLOR_RGB2GRAY, "RGB2GRAY"},
            {cv::COLOR_GRAY2BGR, "GRAY2BGR"},
            {cv::COLOR_GRAY2BGRA, "GRAY2BGRA"},
            {cv::COLOR_BGRA2GRAY, "BGRA2GRAY"},
            {cv::COLOR_RGBA2GRAY, "RGBA2GRAY"},
            {cv::COLOR_BGR2BGR565, "BGR2BGR565"},
            {cv::COLOR_RGB2BGR565, "RGB2BGR565"},
            {cv::COLOR_BGR5652BGR, "BGR5652BGR"},
            {cv::COLOR_BGR5652RGB, "BGR5652RGB"},
            {cv::COLOR_BGRA2BGR565, "BGRA2BGR565"},
            {cv::COLOR_RGBA2BGR565, "RGBA2BGR565"},
            {cv::COLOR_BGR5652BGRA, "BGR5652BGRA"},
            {cv::COLOR_BGR5652RGBA, "BGR5652RGBA"},
            {cv::COLOR_GRAY2BGR565, "GRAY2BGR565"},
            {cv::COLOR_BGR5652GRAY, "BGR5652GRAY"},
            {cv::COLOR_BGR2BGR555, "BGR2BGR555"},
            {cv::COLOR_RGB2BGR555, "RGB2BGR555"},
            {cv::COLOR_BGR5552BGR, "BGR5552BGR"},
            {cv::COLOR_BGR5552RGB, "BGR5552RGB"},
            {cv::COLOR_BGRA2BGR555, "BGRA2BGR555"},
            {cv::COLOR_RGBA2BGR555, "RGBA2BGR555"},
            {cv::COLOR_BGR5552BGRA, "BGR5552BGRA"},
            {cv::COLOR_BGR5552RGBA, "BGR5552RGBA"},
            {cv::COLOR_GRAY2BGR555, "GRAY2BGR555"},
            {cv::COLOR_BGR5552GRAY, "BGR5552GRAY"},
            {cv::COLOR_BGR2XYZ, "BGR2XYZ"},
            {cv::COLOR_RGB2XYZ, "RGB2XYZ"},
            {cv::COLOR_XYZ2BGR, "XYZ2BGR"},
            {cv::COLOR_XYZ2RGB, "XYZ2RGB"},
            {cv::COLOR_BGR2YCrCb, "BGR2YCrCb"},
            {cv::COLOR_RGB2YCrCb, "RGB2YCrCb"},
            {cv::COLOR_YCrCb2BGR, "YCrCb2BGR"},
            {cv::COLOR_YCrCb2RGB, "YCrCb2RGB"},
            {cv::COLOR_BGR2HSV, "BGR2HSV"},
            {cv::COLOR_RGB2HSV, "RGB2HSV"},
            {cv::COLOR_BGR2Lab, "BGR2Lab"},
            {cv::COLOR_RGB2Lab, "RGB2Lab"},
            {cv::COLOR_BGR2Luv, "BGR2Luv"},
            {cv::COLOR_RGB2Luv, "RGB2Luv"},
            {cv::COLOR_BGR2HLS, "BGR2HLS"},
            {cv::COLOR_RGB2HLS, "RGB2HLS"},
            {cv::COLOR_HSV2BGR, "HSV2BGR"},
            {cv::COLOR_HSV2RGB, "HSV2RGB"},
            {cv::COLOR_Lab2BGR, "Lab2BGR"},
            {cv::COLOR_Lab2RGB, "Lab2RGB"},
            {cv::COLOR_Luv2BGR, "Luv2BGR"},
            {cv::COLOR_Luv2RGB, "Luv2RGB"},
            {cv::COLOR_HLS2BGR, "HLS2BGR"},
            {cv::COLOR_HLS2RGB, "HLS2RGB"},
            {cv::COLOR_BGR2HSV_FULL, "BGR2HSV_FULL"},
            {cv::COLOR_RGB2HSV_FULL, "RGB2HSV_FULL"},
            {cv::COLOR_BGR2HLS_FULL, "BGR2HLS_FULL"},
            {cv::COLOR_RGB2HLS_FULL, "RGB2HLS_FULL"},
            {cv::COLOR_HSV2BGR_FULL, "HSV2BGR_FULL"},
            {cv::COLOR_HSV2RGB_FULL, "HSV2RGB_FULL"},
            {cv::COLOR_HLS2BGR_FULL, "HLS2BGR_FULL"},
            {cv::COLOR_HLS2RGB_FULL, "HLS2RGB_FULL"},
            {cv::COLOR_LBGR2Lab, "LBGR2Lab"},
            {cv::COLOR_LRGB2Lab, "LRGB2Lab"},
            {cv::COLOR_LBGR2Luv, "LBGR2Luv"},
            {cv::COLOR_LRGB2Luv, "LRGB2Luv"},
            {cv::COLOR_Lab2LBGR, "Lab2LBGR"},
            {cv::COLOR_Lab2LRGB, "Lab2LRGB"},
            {cv::COLOR_Luv2LBGR, "Luv2LBGR"},
            {cv::COLOR_Luv2LRGB, "Luv2LRGB"},
            {cv::COLOR_BGR2YUV, "BGR2YUV"},
            {cv::COLOR_RGB2YUV, "RGB2YUV"},
            {cv::COLOR_YUV2BGR, "YUV2BGR"},
            {cv::COLOR_YUV2RGB, "YUV2RGB"},
            {cv::COLOR_YUV2RGB_NV12, "YUV2RGB_NV12"},
            {cv::COLOR_YUV2BGR_NV12, "YUV2BGR_NV12"},
            {cv::COLOR_YUV2RGB_NV21, "YUV2RGB_NV21"},
            {cv::COLOR_YUV2BGR_NV21, "YUV2BGR_NV21"},
            {cv::COLOR_YUV2RGBA_NV12, "YUV2RGBA_NV12"},
            {cv::COLOR_YUV2BGRA_NV12, "YUV2BGRA_NV12"},
            {cv::COLOR_YUV2RGBA_NV21, "YUV2RGBA_NV21"},
            {cv::COLOR_YUV2BGRA_NV21, "YUV2BGRA_NV21"},
            {cv::COLOR_YUV2RGB_YV12, "YUV2RGB_YV12"},
            {cv::COLOR_YUV2BGR_YV12, "YUV2BGR_YV12"},
            {cv::COLOR_YUV2RGB_IYUV, "YUV2RGB_IYUV"},
            {cv::COLOR_YUV2BGR_IYUV, "YUV2BGR_IYUV"},
            {cv::COLOR_YUV2RGBA_YV12, "YUV2RGBA_YV12"},
            {cv::COLOR_YUV2BGRA_YV12, "YUV2BGRA_YV12"},
            {cv::COLOR_YUV2RGBA_IYUV, "YUV2RGBA_IYUV"},
            {cv::COLOR_YUV2BGRA_IYUV, "YUV2BGRA_IYUV"},
            {cv::COLOR_YUV2GRAY_420, "YUV2GRAY_420"},
            {cv::COLOR_YUV2RGB_UYVY, "YUV2RGB_UYVY"},
            {cv::COLOR_YUV2BGR_UYVY, "YUV2BGR_UYVY"},
            {cv::COLOR_YUV2RGBA_UYVY, "YUV2RGBA_UYVY"},
            {cv::COLOR_YUV2BGRA_UYVY, "YUV2BGRA_UYVY"},
            {cv::COLOR_YUV2RGB_YUY2, "YUV2RGB_YUY2"},
            {cv::COLOR_YUV2BGR_YUY2, "YUV2BGR_YUY2"},
            {cv::COLOR_YUV2RGB_YVYU, "YUV2RGB_YVYU"},
            {cv::COLOR_YUV2BGR_YVYU, "YUV2BGR_YVYU"},
            {cv::COLOR_YUV2RGBA_YUY2, "YUV2RGBA_YUY2"},
            {cv::COLOR_YUV2BGRA_YUY2, "YUV2BGRA_YUY2"},
            {cv::COLOR_YUV2RGBA_YVYU, "YUV2RGBA_YVYU"},
            {cv::COLOR_YUV2BGRA_YVYU, "YUV2BGRA_YVYU"},
            {cv::COLOR_YUV2GRAY_UYVY, "YUV2GRAY_UYVY"},
            {cv::COLOR_YUV2GRAY_YUY2, "YUV2GRAY_YUY2"},
            {cv::COLOR_RGBA2mRGBA, "RGBA2mRGBA"},
            {cv::COLOR_mRGBA2RGBA, "mRGBA2RGBA"},
            {cv::COLOR_RGB2YUV_I420, "RGB2YUV_I420"},
            {cv::COLOR_BGR2YUV_I420, "BGR2YUV_I420"},
            {cv::COLOR_RGBA2YUV_I420, "RGBA2YUV_I420"},
            {cv::COLOR_BGRA2YUV_I420, "BGRA2YUV_I420"},
            {cv::COLOR_RGB2YUV_YV12, "RGB2YUV_YV12"},
            {cv::COLOR_BGR2YUV_YV12, "BGR2YUV_YV12"},
            {cv::COLOR_RGBA2YUV_YV12, "RGBA2YUV_YV12"},
            {cv::COLOR_BGRA2YUV_YV12, "BGRA2YUV_YV12"},
            {cv::COLOR_BayerBG2BGR, "BayerBG2BGR"},
            {cv::COLOR_BayerGB2BGR, "BayerGB2BGR"},
            {cv::COLOR_BayerRG2BGR, "BayerRG2BGR"},
            {cv::COLOR_BayerGR2BGR, "BayerGR2BGR"},
            {cv::COLOR_BayerBG2GRAY, "BayerBG2GRAY"},
            {cv::COLOR_BayerGB2GRAY, "BayerGB2GRAY"},
            {cv::COLOR_BayerRG2GRAY, "BayerRG2GRAY"},
            {cv::COLOR_BayerGR2GRAY, "BayerGR2GRAY"},
            {cv::COLOR_BayerBG2BGR_VNG, "BayerBG2BGR_VNG"},
            {cv::COLOR_BayerGB2BGR_VNG, "BayerGB2BGR_VNG"},
            {cv::COLOR_BayerRG2BGR_VNG, "BayerRG2BGR_VNG"},
            {cv::COLOR_BayerGR2BGR_VNG, "BayerGR2BGR_VNG"},
            {cv::COLOR_BayerBG2BGR_EA, "BayerBG2BGR_EA"},
            {cv::COLOR_BayerGB2BGR_EA, "BayerGB2BGR_EA"},
            {cv::COLOR_BayerRG2BGR_EA, "BayerRG2BGR_EA"},
            {cv::COLOR_BayerGR2BGR_EA, "BayerGR2BGR_EA"},
            {cv::COLOR_BayerBG2BGRA, "BayerBG2BGRA"},
            {cv::COLOR_BayerGB2BGRA, "BayerGB2BGRA"},
            {cv::COLOR_BayerRG2BGRA, "BayerRG2BGRA"},
            {cv::COLOR_BayerGR2BGRA, "BayerGR2BGRA"},
            {cv::COLOR_COLORCVT_MAX, "COLORCVT_MAX"}
        };
    }

    filters::encoding_info_t get_encoding_info(std::string msg_encoding);
}